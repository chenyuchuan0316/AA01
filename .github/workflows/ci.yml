name: Deploy GAS via OIDC ADC

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1) OIDC → WIF → 取得 ADC
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci

      # 2) 安全檢查 Secrets（只檢查形狀，值會被遮罩）
      - name: Sanity check secrets (safe)
        shell: bash
        run: |
          WIF='${{ secrets.GCP_WIF_PROVIDER }}'; SA='${{ secrets.GCP_SA_EMAIL }}'; SID='${{ secrets.SCRIPT_ID }}'
          echo "WIF len=${#WIF}"; [[ "$WIF" =~ ^projects/[0-9]+/locations/global/workloadIdentityPools/.+/providers/.+$ ]] && echo OK || (echo BAD; exit 1)
          echo "SA len=${#SA}"; [[ "$SA" =~ @.*gserviceaccount\.com$ ]] && echo OK || (echo BAD; exit 1)
          echo "SID len=${#SID}"; [[ "$SID" =~ ^[A-Za-z0-9_-]+$ ]] && echo OK || (echo BAD; exit 1)

      # 3) 確認 ADC 憑證檔存在
      - name: Debug ADC env
        shell: bash
        run: |
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GOOGLE_APPLICATION_CREDENTIALS"
          test -f "$GOOGLE_APPLICATION_CREDENTIALS" && echo "ADC file exists" || (echo "ADC missing"; exit 1)

      # 4) 寫入 .clasp.json（rootDir="."）
      - name: Write .clasp.json
        run: |
          echo '{ "scriptId": "${{ secrets.SCRIPT_ID }}", "rootDir": "." }' > .clasp.json
          echo "[debug] .clasp.json:" && cat .clasp.json

      # 5) 安裝 googleapis，並以 ADC 直接呼叫 Apps Script API 部署
      - run: npm i googleapis@^126

      - name: Deploy via Script API (ADC)
        env:
          VERSION_DESC: "CI $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
          DEPLOY_DESC:  "CI auto deploy $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
        run: |
          node - <<'EOS'
          const fs = require('fs');
          const path = require('path');
          const {GoogleAuth} = require('google-auth-library');
          const {google} = require('googleapis');
          // 讀取 .clasp.json
          const conf = JSON.parse(fs.readFileSync('.clasp.json','utf8'));
          const scriptId = (conf.scriptId || process.env.SCRIPT_ID || '').trim();
          const rootDir = conf.rootDir || '.';
          if (!scriptId) throw new Error('SCRIPT_ID 未設定');
          // 收集檔案
          const IGN = new Set(['.git','.github','node_modules','.vscode','docs']);
          const files = [];
          const walk = d => fs.readdirSync(d).forEach(n=>{
            const p = path.join(d,n); const rel = path.relative(rootDir,p);
            if (rel.startsWith('..')) return;
            const st=fs.statSync(p);
            if (st.isDirectory()) { if (!IGN.has(n)) walk(p); }
            else {
              if (n==='appsscript.json' && d===rootDir)
                files.push({name:'appsscript',type:'JSON',source:fs.readFileSync(p,'utf8')});
              else if (/\.(gs|js)$/i.test(n))
                files.push({name:path.basename(n,path.extname(n)),type:'SERVER_JS',source:fs.readFileSync(p,'utf8')});
              else if (/\.html$/i.test(n))
                files.push({name:path.basename(n,path.extname(n)),type:'HTML',source:fs.readFileSync(p,'utf8')});
            }
          });
          walk(rootDir);
          if (!files.find(f=>f.name==='appsscript'&&f.type==='JSON'))
            throw new Error('找不到 appsscript.json（請放在 rootDir 並命名正確）');
          console.log('Collected', files.length, 'files');

          // 以 ADC 取得權限
          const auth = new GoogleAuth({
            scopes: ['https://www.googleapis.com/auth/script.projects',
                     'https://www.googleapis.com/auth/script.deployments']
          });
          (async () => {
            const client = await auth.getClient();
            const script = google.script({version:'v1', auth: client});
            await script.projects.updateContent({scriptId, requestBody:{files}});
            console.log('updateContent OK');
            const desc = process.env.VERSION_DESC || `CI ${new Date().toISOString()}`;
            const ver = await script.projects.versions.create({scriptId, requestBody:{description:desc}});
            const versionNumber = ver.data?.versionNumber;
            console.log('createVersion OK:', versionNumber);
            await script.projects.deployments.create({scriptId, requestBody:{
              versionNumber, manifestFileName:'appsscript', description: process.env.DEPLOY_DESC || desc
            }});
            console.log('createDeployment OK');
          })().catch(e=>{ console.error('DEPLOY ERR:', e.response?.data||e); process.exit(1); });
          EOS
